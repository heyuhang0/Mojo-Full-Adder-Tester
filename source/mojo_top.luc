module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  sig end_test, adder_inputs[3], do_test;
  sig adder_outputs[2];
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      tester_ctr tester;
      tester_display display;
    }
  }
  
  sig auto_test;
  // Test data generator
  // 6bit: DONE|CI|A|B|C|internal_time
  counter test_gen (#DIV(25), #SIZE(6));
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    // auto/manual switch
    auto_test = io_dip[0][0];
    
    // auto test
    test_gen.rst = rst;
    test_gen.clk = clk & ~tester.result_ready ;  // pause when test finished
    if (auto_test) {
      end_test = test_gen.value[5];
      adder_inputs = test_gen.value[4:2];
      do_test = (test_gen.value[1:0] == 2b10);
    }
    // manual test
    else {
      end_test = io_button[0];  // press UP button to sotp test
      adder_inputs = io_dip[2][2:0]; // 
      do_test = io_button[1];   // press CENTER button to test
    }
    io_led[2][2:0] = adder_inputs;
    
    // read adder's output
    adder_outputs = io_dip[1][1:0];
    io_led[1][1:0] = adder_outputs;
    
    
    // output test value to a, b, ci
    tester.adder_inputs = adder_inputs;
    tester.adder_outputs = adder_outputs;
    tester.end_test = end_test;
    tester.do_test = do_test;

    // show current result
    io_led[0] = 8x{tester.result};
    
    // show on display
    display.ready = tester.result_ready;
    display.passed = tester.result;
    display.checking = do_test;
    io_seg = display.seg;
    io_sel = display.sel;
  }
}