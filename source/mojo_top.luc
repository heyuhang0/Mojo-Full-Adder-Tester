module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      tester_display display;
      dff done;
      dff failed;
    }
  }
  
  // Test data generator
  // 6bit: DONE|CI|A|B|C|internal_time
  counter test_gen (#DIV(26), #SIZE(6));
  sig test_done, test_value[3], test_timing[2];
  
  // IO for adder, used as alias of io_led and io_dip
  sig ci, a, b; //P17, P16, P15
  sig co, sum;  //P121, P120
  
  sig expected[2];
  sig checking;
  sig correct;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    // inits display
    io_seg = display.seg;
    io_sel = display.sel;
    
    // inits test value
    test_gen.rst = rst;
    test_gen.clk = clk & ~done.q ;  // pause when test finished
    test_done = test_gen.value[5];
    test_value = test_gen.value[4:2];
    test_timing = test_gen.value[1:0];
    
    // output test value to a, b, ci
    ci = test_value[2];
    a = test_value[1];
    b = test_value[0];
    // alias adder output
    io_led[2][2:0] = c{ci, a, b};
    // expected value from full adder
    expected = a + b + ci;
    
    // read adder result
    co = io_dip[0][1];
    sum = io_dip[0][0];
    // show adder result using middle led panel
    io_led[1][1:0] = c{co, sum};
    
    // compare result
    // only check when internal timing is b10, so adder has time to prepare result
    checking = test_timing == 2b10;
    io_led[0] = 8x{checking};
    correct = (expected == c{co, sum}) | ~checking;
    
    // update states
    done.d = done.q | test_done | failed.q;
    failed.d = failed.q | ~correct;
    
    // show on display
    display.ready = done.q;
    display.passed = ~failed.q;
  }
}