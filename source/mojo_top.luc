module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]    // DIP switches on IO Shield
    
    //output ci,
    //output a,
    //output b,
    //input sum,
    //input co
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      tester_display display;
      dff done;
      dff failed;
    }
  }
  
  counter test_value (#DIV(26), #SIZE(4), #TOP(8));
  
  sig a, b, ci, sum, co;
  sig expected[2];
  sig correct;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    // inits display
    io_seg = display.seg;
    io_sel = display.sel;
    
    // inits test value
    test_value.rst = rst;
    test_value.clk = clk & ~failed.q;  // pause when test failed
    
    // output test value to a, b, ci
    ci = test_value.value[2];
    a = test_value.value[1];
    b = test_value.value[0];
    // show current ci, a, b using right led panel
    io_led[2][2:0] = test_value.value[2:0];
    // expected value from full adder
    expected = test_value.value[0] + test_value.value[1] + test_value.value[2];
    
    case (expected) {
      0: co=0; sum=0;
      1: co=0; sum=1;
      2: co=1; sum=0;
      3: co=1; sum=1;
      default: co=0; sum=0;
    }
    // show external full adder's result using middle led panel
    io_led[1][1] = co;
    io_led[1][0] = sum;
    
    // compare result
    correct = (expected[0] == sum) & (expected[1] == co);
    
    // record current state
    done.d = done.q | test_value.value[3] | failed.q;  // done is true once test_value > 0b111(so it finished one loop)
    failed.d = failed.q | ~correct;  // failed is true once one test failed
    
    // show on display
    display.ready = done.q;
    display.passed = ~failed.q;
  }
}